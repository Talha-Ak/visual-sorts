{"version":3,"sources":["components/SortListbox.tsx","components/Controls.tsx","components/Visualiser.tsx","sorts/bubbleSort.ts","sorts/insertionSort.ts","sorts/selectionSort.ts","sorts/algorithms.ts","App.tsx","index.tsx"],"names":["SortListbox","list","selectedItem","setSelectedItem","disabled","className","value","onChange","Label","Button","aria-hidden","as","Fragment","leave","leaveFrom","leaveTo","Options","static","map","name","nameIdx","Option","active","selected","Controls","isRunning","sortNames","arraySize","handleArrayChange","handleSortClick","handleShuffleClick","handleResetClick","selectedSortIdx","setSelectedSortIdx","type","min","max","onClick","show","enter","enterFrom","enterTo","Visualiser","sortArray","_","array","style","height","length","Date","toString","bubbleSort","sort","anim","swapped","searchSize","i","isGreater","swap","push","indicies","insertionSort","j","selectionSort","minIndex","isSmaller","idx1","idx2","animArray","generateArray","size","Array","from","keys","Math","floor","random","algorithms","App","useState","setSortArray","setActive","activeRef","useRef","current","useEffect","startSort","slice","animations","sortingAlgorithms","bars","document","getElementsByClassName","children","delay","animateSort","idx","prevBars","forEach","bar","classList","replace","currBar1","currBar2","setTimeout","e","Number","target","ReactDOM","render","StrictMode","getElementById"],"mappings":"uNAyEeA,EA9DK,SAAC,GAA4D,IAA3DC,EAA0D,EAA1DA,KAAMC,EAAoD,EAApDA,aAAcC,EAAsC,EAAtCA,gBAAiBC,EAAqB,EAArBA,SAEzD,OACE,qBAAKC,UAAU,OAAf,SACE,cAAC,IAAD,CAASC,MAAOJ,EAAcK,SAAUJ,EAAiBC,SAAUA,EAAnE,SACI,qCACE,cAAC,IAAQI,MAAT,CAAeH,UAAU,oCAAzB,uBACA,sBAAKA,UAAU,WAAf,UACE,eAAC,IAAQI,OAAT,CAAgBJ,UAAU,8MAA1B,UACE,sBAAMA,UAAU,iBAAhB,SAAkCJ,EAAKC,KACvC,sBAAMG,UAAU,uEAAhB,SACE,cAAC,IAAD,CACEA,UAAU,wBACVK,cAAY,cAIlB,cAAC,IAAD,CACEC,GAAIC,WACJC,MAAM,iCACNC,UAAU,sCACVC,QAAQ,0DAJV,SAME,cAAC,IAAQC,QAAT,CAAiBC,QAAM,EAACZ,UAAU,0LAAlC,SACGJ,EAAKiB,KAAI,SAACC,EAAMC,GAAP,OACR,cAAC,IAAQC,OAAT,CAEEhB,UAAW,gBAAGiB,EAAH,EAAGA,OAAH,gBACNA,EAAS,4BAA8B,gBADjC,oFAIXhB,MAAOc,EANT,SAQG,gBAAGG,EAAH,EAAGA,SAAH,EAAaD,OAAb,OACC,qCACE,sBACEjB,UAAS,UAAKkB,EAAW,cAAgB,cAAhC,mBADX,SAIGJ,IAEFI,EACC,sBACElB,UAAS,UAAc,gBAAd,sFADX,SAIE,cAAC,IAAD,CAASA,UAAU,UAAUK,cAAY,WAEzC,UAtBHU,qB,OCmDZI,EAvEE,SAAC,GAAD,IACfC,EADe,EACfA,UACAC,EAFe,EAEfA,UACAC,EAHe,EAGfA,UACAC,EAJe,EAIfA,kBACAC,EALe,EAKfA,gBACAC,EANe,EAMfA,mBACAC,EAPe,EAOfA,iBACAC,EARe,EAQfA,gBACAC,EATe,EASfA,mBATe,OAWf,qCACE,sBAAK5B,UAAU,OAAf,UACE,sBAAKA,UAAU,yDAAf,UACE,8CACA,+BAAOsB,OAET,uBACEO,KAAK,QACLC,IAAI,IACJC,IAAI,MACJhC,SAAUqB,EACVnB,MAAOqB,EACPpB,SAAUqB,EACVvB,UAAU,6FAId,cAAC,EAAD,CACEJ,KAAMyB,EACNxB,aAAc8B,EACd7B,gBAAiB8B,EACjB7B,SAAUqB,IAEZ,sBAAKpB,UAAU,+DAAf,UACE,yBACEgC,QAASP,EACTI,KAAK,SACL7B,UAAU,oLAHZ,UAKE,cAAC,IAAD,CAAWA,UAAU,kBAAkBK,cAAY,SALrD,aAQA,wBACE2B,QAASR,EACTK,KAAK,SACL7B,UAAU,oVAHZ,kBAOA,cAAC,IAAD,CACEM,GAAIC,WACJ0B,KAAMb,EACNc,MAAM,mCACNC,UAAU,qCAAqCC,QAAQ,sCACvD5B,MAAM,kCACNC,UAAU,cAAcC,QAAQ,YANlC,SAQE,yBACEsB,QAASN,EACTG,KAAK,SACL7B,UAAU,oLAHZ,UAKE,cAAC,IAAD,CAASA,UAAU,kBAAkBK,cAAY,SALnD,oBC/DOgC,EARI,SAAC,GAAD,IAAEC,EAAF,EAAEA,UAAF,OACjB,qBAAKtC,UAAU,yGAAf,SACGsC,EAAUzB,KAAI,SAACZ,EAAOsC,EAAGC,GAAX,OACf,qBAAqCxC,UAAU,mCAAmCyC,MAAO,CAAEC,OAAO,GAAD,QAAMzC,EAAQ,GAAKuC,EAAMG,OAAS,IAAlC,OAAvF1C,EAAQ2C,OAAOC,kBCmBhBC,EAA+B,CAC1ChC,KAAM,cACNiC,KA1BW,SAACP,GAMZ,IALA,IAAMQ,EAAwB,GAE1BC,GAAU,EACVC,EAAaV,EAAMG,OAEhBM,GAAS,CACdA,GAAU,EAIV,IAAK,IAAIE,EAAI,EAAGA,EAAID,EAAYC,IAC1BC,EAAUD,EAAE,EAAGA,EAAGX,EAAOQ,KAC3BK,EAAKF,EAAE,EAAGA,EAAGX,EAAOQ,GACpBC,GAAU,GAGdC,IAIF,OADAF,EAAKM,KAAK,CAACzB,KAAM,MAAO0B,SAAU,EAAE,GAAI,GAAIf,MAAOA,IAC5CQ,ICHIQ,EAAkC,CAC7C1C,KAAM,iBACNiC,KApBW,SAACP,GAIZ,IAHA,IAAMQ,EAAwB,GAE1BG,EAAI,EACDA,EAAIX,EAAMG,QAAQ,CAGvB,IAFA,IAAIc,EAAIN,EAEDM,EAAI,GAAKL,EAAUK,EAAE,EAAGA,EAAGjB,EAAOQ,IACvCK,EAAKI,EAAE,EAAGA,EAAGjB,EAAOQ,GACpBS,IAEFN,IAIF,OADAH,EAAKM,KAAK,CAACzB,KAAM,MAAO0B,SAAU,EAAE,GAAI,GAAIf,UACrCQ,ICGIU,EAAkC,CAC7C5C,KAAM,iBACNiC,KApBW,SAACP,GAIZ,IAHA,IAAMQ,EAAwB,GAGrBG,EAAI,EAAGA,EAAIX,EAAMG,OAAS,EAAGQ,IAAK,CAEzC,IADA,IAAIQ,EAAWR,EACNM,EAAIN,EAAI,EAAGM,EAAIjB,EAAMG,OAAQc,IAChCG,EAAUH,EAAGE,EAAUnB,EAAOQ,KAAOW,EAAWF,GAElDE,IAAaR,GACfE,EAAKF,EAAGQ,EAAUnB,EAAOQ,GAK7B,OADAA,EAAKM,KAAK,CAACzB,KAAM,MAAO0B,SAAU,EAAE,GAAI,GAAIf,UACrCQ,ICFII,EAAY,SAACS,EAAcC,EAActB,EAAiBuB,GAErE,OADAA,EAAUT,KAAK,CAACzB,KAAM,UAAW0B,SAAU,CAACM,EAAMC,GAAOtB,UAClDA,EAAMqB,GAAQrB,EAAMsB,IAGhBF,EAAY,SAACC,EAAcC,EAActB,EAAiBuB,GAErE,OADAA,EAAUT,KAAK,CAACzB,KAAM,UAAW0B,SAAU,CAACM,EAAMC,GAAOtB,UAClDA,EAAMqB,GAAQrB,EAAMsB,IAGhBT,EAAO,SAACQ,EAAcC,EAActB,EAAiBuB,GAAgC,IAAD,EAClE,CAACvB,EAAMsB,GAAOtB,EAAMqB,IAAhDrB,EAAMqB,GADwF,KACjFrB,EAAMsB,GAD2E,KAE/FC,EAAUT,KAAK,CAACzB,KAAM,OAAQ0B,SAAU,CAACM,EAAMC,GAAOtB,WAG3CwB,EAAgB,SAACC,GAI5B,IAHA,IAAMzB,EAAQ0B,MAAMC,KAAKD,MAAMD,GAAMG,QAG5BjB,EAAIX,EAAMG,OAAS,EAAGQ,EAAI,EAAGA,IAAK,CACzC,IAAMM,EAAIY,KAAKC,MAAMD,KAAKE,UAAYpB,EAAI,IADD,EAElB,CAACX,EAAMiB,GAAIjB,EAAMW,IAAvCX,EAAMW,GAFkC,KAE9BX,EAAMiB,GAFwB,KAK3C,OAAOjB,GAKMgC,EAFI,CAAChB,EAAeE,EAAeZ,GC8CnC2B,EAnFH,WAEV,MAAkCC,oBAAS,kBAAMV,EAAc,OAA/D,mBAAO1B,EAAP,KAAkBqC,EAAlB,KACA,EAA8CD,mBAAS,GAAvD,mBAAO/C,EAAP,KAAwBC,EAAxB,KACA,EAA4B8C,oBAAS,GAArC,mBAAOzD,EAAP,KAAe2D,EAAf,KACMC,EAAYC,iBAAO7D,GACzB4D,EAAUE,QAAU9D,EAEpB+D,qBAAU,WACJ/D,EACFgE,IAGAN,EAAarC,EAAU4C,WAExB,CAACjE,IAEJ,IAAMgE,EAAY,WAChB,IAAME,EAAaC,EAAkBzD,GAAiBoB,KAAKT,EAAU4C,SAC/DG,EAAOC,SAASC,uBAAuB,eAAe,GAAGC,SACzDC,EAAQ,KAAOnD,EAAUK,OAC/B+C,EAAYP,EAAY,EAAGE,EAAMI,IAG7BC,EAAc,SAAdA,EAAe1C,EAAuB2C,EAAaN,EAAsBI,GAAmB,IAAD,EACzFG,EAAQ,UAAG5C,EAAK2C,EAAM,UAAd,aAAG,EAAepC,SACxB,OAARqC,QAAQ,IAARA,KAAUC,SAAQ,SAAAC,GAAG,OAAIT,EAAKS,GAAKC,UAAUC,QAAQ,aAAc,kBAEnE,IAAMC,EAAWZ,EAAKrC,EAAK2C,GAAKpC,SAAS,IACnC2C,EAAWb,EAAKrC,EAAK2C,GAAKpC,SAAS,IAEzC,GAAIsB,EAAUE,QAAS,CACrB,OAAQ/B,EAAK2C,GAAK9D,MAChB,IAAK,UACHoE,EAASF,UAAUC,QAAQ,cAAe,cAC1CE,EAASH,UAAUC,QAAQ,cAAe,cAC1C,MACF,IAAK,OACHC,EAASF,UAAUC,QAAQ,cAAe,cAC1CE,EAASH,UAAUC,QAAQ,cAAe,cAF5C,MAGmD,CAACE,EAASzD,MAAMC,OAAQuD,EAASxD,MAAMC,QAAvFuD,EAASxD,MAAMC,OAHlB,KAG0BwD,EAASzD,MAAMC,OAHzC,KAIE,MACF,IAAK,MAGH,OAFAkC,GAAU,QACVD,EAAa3B,EAAK2C,GAAKnD,OAI3BmD,IACAQ,YAAW,kBAAMT,EAAY1C,EAAM2C,EAAKN,EAAMI,KAAQA,QAGtDQ,EAASF,UAAUC,QAAQ,aAAc,eACzCE,EAASH,UAAUC,QAAQ,aAAc,gBAI7C,OACE,sBAAKhG,UAAU,kEAAf,UACE,oBAAIA,UAAU,wDAAd,0BACA,sBAAKA,UAAU,yDAAf,UACE,cAAC,EAAD,CAAYsC,UAAWA,IACvB,qBAAKtC,UAAU,mFAAf,SACE,cAAC,EAAD,CACEoB,UAAWH,EACXI,UAAW+D,EAAkBvE,KAAI,SAAAkC,GAAI,OAAIA,EAAKjC,QAC9CQ,UAAWgB,EAAUK,OACrBpB,kBAAmB,SAAC6E,GAAD,OAAOzB,EAAaX,EAAcqC,OAAOD,EAAEE,OAAOrG,UACrEuB,gBAAiB,kBAAMoD,GAAU,IACjClD,iBAAkB,kBAAMkD,GAAU,IAClCnD,mBAAoB,WAClBmD,GAAU,GACVD,EAAaX,EAAc1B,EAAUK,UAEvChB,gBAAiBA,EACjBC,mBAAoB,SAACwE,GAAD,OAAOxE,EAAmBwE,eC3E1DG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFnB,SAASoB,eAAe,W","file":"static/js/main.618ecfee.chunk.js","sourcesContent":["import { Fragment } from 'react';\r\nimport { Listbox, Transition } from '@headlessui/react';\r\nimport { HiCheck, HiSelector } from 'react-icons/hi';\r\n\r\ninterface Props {\r\n  list: string[];\r\n  selectedItem: number;\r\n  setSelectedItem: React.Dispatch<React.SetStateAction<number>>;\r\n  disabled: boolean;\r\n}\r\n\r\nconst SortListbox = ({list, selectedItem, setSelectedItem, disabled}: Props) => {\r\n\r\n  return (\r\n    <div className=\"w-64\">\r\n      <Listbox value={selectedItem} onChange={setSelectedItem} disabled={disabled}>\r\n          <>\r\n            <Listbox.Label className=\"text-sm font-medium text-gray-500\">Algorithm</Listbox.Label>\r\n            <div className=\"relative\">\r\n              <Listbox.Button className=\"relative w-full py-2 pl-3 pr-10 text-left sm:text-sm bg-white disabled:bg-gray-100 hover:bg-blue-50 rounded-md shadow-md focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 cursor-default\">\r\n                <span className=\"block truncate\">{list[selectedItem]}</span>\r\n                <span className=\"absolute inset-y-0 right-0 flex items-center p-2 pointer-events-none\">\r\n                  <HiSelector\r\n                    className=\"w-5 h-5 text-gray-400\"\r\n                    aria-hidden=\"true\"\r\n                  />\r\n                </span>\r\n              </Listbox.Button>\r\n              <Transition\r\n                as={Fragment}\r\n                leave=\"transition ease-in duration-75\"\r\n                leaveFrom=\"transform opacity-100 translate-y-0\"\r\n                leaveTo=\"transform opacity-0 translate-y-1.5 md:-translate-y-1.5\"\r\n              >\r\n                <Listbox.Options static className=\"absolute bottom-full md:bottom-auto z-10 w-full py-1 my-1 overflow-auto text-base bg-white rounded-md shadow-lg max-h-60 ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm\">\r\n                  {list.map((name, nameIdx) => (\r\n                    <Listbox.Option\r\n                      key={nameIdx}\r\n                      className={({ active }) =>\r\n                        `${active ? 'text-blue-900 bg-blue-100' : 'text-gray-900'}\r\n                          cursor-default select-none relative py-2 pl-10 pr-4`\r\n                      }\r\n                      value={nameIdx}\r\n                    >\r\n                      {({ selected, active }) => (\r\n                        <>\r\n                          <span\r\n                            className={`${selected ? 'font-medium' : 'font-normal'\r\n                              } block truncate`}\r\n                          >\r\n                            {name}\r\n                          </span>\r\n                          {selected ? (\r\n                            <span\r\n                              className={`${active ? 'text-blue-600' : 'text-blue-600'}\r\n                                absolute inset-y-0 left-0 flex items-center pl-3`}\r\n                            >\r\n                              <HiCheck className=\"w-5 h-5\" aria-hidden=\"true\" />\r\n                            </span>\r\n                          ) : null}\r\n                        </>\r\n                      )}\r\n                    </Listbox.Option>\r\n                  ))}\r\n                </Listbox.Options>\r\n              </Transition>\r\n            </div>\r\n          </>\r\n      </Listbox>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SortListbox;","import SortListbox from './SortListbox';\r\nimport { BiReset, BiRefresh } from 'react-icons/bi';\r\nimport { Transition } from '@headlessui/react';\r\nimport { Fragment } from 'react';\r\n\r\ninterface Props {\r\n  isRunning: boolean;\r\n  sortNames: string[];\r\n  arraySize: number;\r\n  handleArrayChange: React.ChangeEventHandler<HTMLInputElement>;\r\n  handleSortClick: () => void;\r\n  handleResetClick: () => void;\r\n  handleShuffleClick: () => void;\r\n  selectedSortIdx: number;\r\n  setSelectedSortIdx: React.Dispatch<React.SetStateAction<number>>;\r\n}\r\n\r\nconst Controls = ({\r\n  isRunning,\r\n  sortNames,\r\n  arraySize,\r\n  handleArrayChange,\r\n  handleSortClick,\r\n  handleShuffleClick,\r\n  handleResetClick,\r\n  selectedSortIdx,\r\n  setSelectedSortIdx\r\n}: Props) => (\r\n  <>\r\n    <div className='w-64'>\r\n      <div className='flex justify-between text-sm font-medium text-gray-500'>\r\n        <span>Array size</span>\r\n        <span>{arraySize}</span>\r\n      </div>\r\n      <input\r\n        type='range'\r\n        min='5'\r\n        max='120'\r\n        disabled={isRunning}\r\n        value={arraySize}\r\n        onChange={handleArrayChange}\r\n        className='w-full rounded-lg focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500'\r\n      />\r\n    </div>\r\n\r\n    <SortListbox\r\n      list={sortNames}\r\n      selectedItem={selectedSortIdx}\r\n      setSelectedItem={setSelectedSortIdx}\r\n      disabled={isRunning}\r\n    />\r\n    <div className='w-64 mt-2 mb-8 grid grid-cols-3 gap-x-2 justify-items-center'>\r\n      <button\r\n        onClick={handleShuffleClick}\r\n        type='button'\r\n        className='h-full px-4 py-2 text-sm font-medium text-gray-400 bg-gray-50 hover:bg-gray-100 active:bg-gray-200 rounded-md focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500'\r\n      >\r\n        <BiRefresh className=\"w-5 h-5 mx-auto\" aria-hidden=\"true\" />\r\n          Shuffle\r\n      </button>\r\n      <button\r\n        onClick={handleSortClick}\r\n        type='button'\r\n        className='z-0 min-w-0 h-3/4 px-4 py-2.5 self-center text-sm font-medium text-blue-900 bg-blue-100 rounded-md shadow-md transition-transform transform motion-reduce:transition-none duration-75 ease-out active:translate-y-0.5 active:shadow-none hover:bg-blue-200 active:bg-blue-300 focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500'\r\n      >\r\n        Sort\r\n    </button>\r\n      <Transition\r\n        as={Fragment}\r\n        show={isRunning}\r\n        enter='transition ease-out duration-100'\r\n        enterFrom='transform -translate-x-3 opacity-0' enterTo='transform translate-x-0 opacity-100'\r\n        leave='transition ease-in duration-100'\r\n        leaveFrom='opacity-100' leaveTo='opacity-0'\r\n      >\r\n        <button\r\n          onClick={handleResetClick}\r\n          type='button'\r\n          className='h-full px-4 py-2 text-sm font-medium text-gray-400 bg-gray-50 hover:bg-gray-100 active:bg-gray-200 rounded-md focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500'\r\n        >\r\n          <BiReset className=\"w-5 h-5 mx-auto\" aria-hidden=\"true\" />\r\n          Reset\r\n        </button>\r\n      </Transition>\r\n    </div>\r\n  </>\r\n);\r\n\r\nexport default Controls;","interface Props {\r\n  sortArray: number[];\r\n}\r\n\r\nconst Visualiser = ({sortArray}: Props) => (\r\n  <div className='visual-bars col-span-6 lg:col-span-7 h-4/6 flex items-end justify-center space-x-0.5 md:space-x-1 mx-4'>\r\n    {sortArray.map((value, _, array) => (\r\n    <div key={value + Date().toString()} className='w-14 bg-teal-500 rounded-tl-md  ' style={{ height: `${(value + 1) / array.length * 100}%` }}></div>\r\n  ))}\r\n</div>\r\n);\r\n\r\nexport default Visualiser;","import {SortingAlgorithm, AnimationStep, isGreater, swap } from './algorithms';\r\n\r\nconst sort = (array: number[]) => {\r\n  const anim: AnimationStep[] = [];\r\n\r\n  let swapped = true;\r\n  let searchSize = array.length;\r\n\r\n  while (swapped) {\r\n    swapped = false;\r\n\r\n    // Start at 1 since i-1 is used to compare.\r\n    //array.length - 1 because last position will be naturally sorted.\r\n    for (let i = 1; i < searchSize; i++) {\r\n      if (isGreater(i-1, i, array, anim)) {\r\n        swap(i-1, i, array, anim);\r\n        swapped = true;\r\n      }\r\n    }\r\n    searchSize--;\r\n  }\r\n\r\n  anim.push({type: 'end', indicies: [-1, -1], array: array});\r\n  return anim;\r\n};\r\n\r\nexport const bubbleSort: SortingAlgorithm = {\r\n  name: 'Bubble Sort',\r\n  sort\r\n};","import {SortingAlgorithm, AnimationStep, isGreater, swap } from './algorithms';\r\n\r\nconst sort = (array: number[]) => {\r\n  const anim: AnimationStep[] = [];\r\n\r\n  let i = 1; // Skip first element\r\n  while (i < array.length) {\r\n    let j = i;\r\n    // Compare previous element with current. If previous is larger, swap.\r\n    while (j > 0 && isGreater(j-1, j, array, anim)) {\r\n      swap(j-1, j, array, anim);\r\n      j--;\r\n    }\r\n    i++;\r\n  }\r\n\r\n  anim.push({type: 'end', indicies: [-1, -1], array});\r\n  return anim;\r\n};\r\n\r\nexport const insertionSort: SortingAlgorithm = {\r\n  name: 'Insertion Sort',\r\n  sort\r\n};","import {SortingAlgorithm, AnimationStep, isSmaller, swap } from './algorithms';\r\n\r\nconst sort = (array: number[]) => {\r\n  const anim: AnimationStep[] = [];\r\n\r\n  // Can do array.length - 1 because last element will already be sorted.\r\n  for (let i = 0; i < array.length - 1; i++) { \r\n    let minIndex = i;\r\n    for (let j = i + 1; j < array.length; j++) {\r\n      if (isSmaller(j, minIndex, array, anim)) minIndex = j;\r\n    }\r\n    if (minIndex !== i) {\r\n      swap(i, minIndex, array, anim);\r\n    }\r\n  }\r\n\r\n  anim.push({type: 'end', indicies: [-1, -1], array});\r\n  return anim;\r\n};\r\n\r\nexport const selectionSort: SortingAlgorithm = {\r\n  name: 'Selection Sort',\r\n  sort\r\n};","import { bubbleSort } from './bubbleSort';\r\nimport { insertionSort } from './insertionSort';\r\nimport { selectionSort } from './selectionSort';\r\n\r\nexport interface SortingAlgorithm {\r\n  name: string;\r\n  sort: (array: number[]) => AnimationStep[];\r\n}\r\n\r\nexport interface AnimationStep {\r\n  type: 'compare' | 'swap' | 'end';\r\n  indicies: [number, number];\r\n  array: number[];\r\n}\r\n\r\nexport const isGreater = (idx1: number, idx2: number, array: number[], animArray: AnimationStep[]) => {\r\n  animArray.push({type: 'compare', indicies: [idx1, idx2], array});\r\n  return array[idx1] > array[idx2];\r\n};\r\n\r\nexport const isSmaller = (idx1: number, idx2: number, array: number[], animArray: AnimationStep[]) => {\r\n  animArray.push({type: 'compare', indicies: [idx1, idx2], array});\r\n  return array[idx1] < array[idx2];\r\n};\r\n\r\nexport const swap = (idx1: number, idx2: number, array: number[], animArray: AnimationStep[]) => {\r\n  [array[idx1], array[idx2]] = [array[idx2], array[idx1]];\r\n  animArray.push({type: 'swap', indicies: [idx1, idx2], array});\r\n};\r\n\r\nexport const generateArray = (size: number): number[] => {\r\n  const array = Array.from(Array(size).keys());\r\n\r\n  // Durstenfeld shuffle algorithm: https://stackoverflow.com/a/12646864\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n\r\n  return array;\r\n};\r\n\r\nconst algorithms = [insertionSort, selectionSort, bubbleSort];\r\n\r\nexport default algorithms;","import Controls from './components/Controls';\nimport Visualiser from './components/Visualiser';\nimport sortingAlgorithms, { AnimationStep, generateArray } from './sorts/algorithms';\nimport { useEffect, useState, useRef } from 'react';\n\nconst App = () => {\n\n  const [sortArray, setSortArray] = useState(() => generateArray(40));\n  const [selectedSortIdx, setSelectedSortIdx] = useState(0);\n  const [active, setActive] = useState(false);\n  const activeRef = useRef(active);\n  activeRef.current = active;\n\n  useEffect(() => {\n    if (active) {\n      startSort();\n    } else {\n      // if (currentAnim.current) clearTimeout(currentAnim.current);\n      setSortArray(sortArray.slice());\n    }\n  }, [active]);\n\n  const startSort = () => {\n    const animations = sortingAlgorithms[selectedSortIdx].sort(sortArray.slice());\n    const bars = document.getElementsByClassName('visual-bars')[0].children;\n    const delay = 1500 / sortArray.length;\n    animateSort(animations, 0, bars, delay);\n  };\n\n  const animateSort = (anim: AnimationStep[], idx: number, bars: HTMLCollection, delay: number) => {\n    const prevBars = anim[idx - 1]?.indicies;\n    prevBars?.forEach(bar => bars[bar].classList.replace('bg-red-500', 'bg-teal-500'));\n\n    const currBar1 = bars[anim[idx].indicies[0]] as HTMLElement;\n    const currBar2 = bars[anim[idx].indicies[1]] as HTMLElement;\n\n    if (activeRef.current) {\n      switch (anim[idx].type) {\n        case 'compare':\n          currBar1.classList.replace('bg-teal-500', 'bg-red-500');\n          currBar2.classList.replace('bg-teal-500', 'bg-red-500');\n          break;\n        case 'swap':\n          currBar1.classList.replace('bg-teal-500', 'bg-red-500');\n          currBar2.classList.replace('bg-teal-500', 'bg-red-500');\n          [currBar1.style.height, currBar2.style.height] = [currBar2.style.height, currBar1.style.height];\n          break;\n        case 'end':\n          setActive(false);\n          setSortArray(anim[idx].array);\n          return;\n      }\n\n      idx++;\n      setTimeout(() => animateSort(anim, idx, bars, delay), delay);\n\n    } else {\n      currBar1.classList.replace('bg-red-500', 'bg-teal-500');\n      currBar2.classList.replace('bg-red-500', 'bg-teal-500');\n    }\n  };\n\n  return (\n    <div className='h-screen max-w-screen-2xl mx-auto flex flex-col gap-16 md:gap-4'>\n      <h1 className='font-sans font-black text-center text-4xl md:text-6xl'>Visual Sorts</h1>\n      <div className=\"flex-grow gap-y-5 md:grid md:grid-cols-10 items-center\">\n        <Visualiser sortArray={sortArray} />\n        <div className='my-8 md:mt-0 md:col-span-4 lg:col-span-3 flex flex-col items-center gap-y-5 mx-4'>\n          <Controls\n            isRunning={active}\n            sortNames={sortingAlgorithms.map(sort => sort.name)}\n            arraySize={sortArray.length}\n            handleArrayChange={(e) => setSortArray(generateArray(Number(e.target.value)))}\n            handleSortClick={() => setActive(true)}\n            handleResetClick={() => setActive(false)}\n            handleShuffleClick={() => {\n              setActive(false);\n              setSortArray(generateArray(sortArray.length));\n            }}\n            selectedSortIdx={selectedSortIdx}\n            setSelectedSortIdx={(e) => setSelectedSortIdx(e)}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}