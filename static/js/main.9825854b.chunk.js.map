{"version":3,"sources":["components/SortListbox.tsx","components/ControlButton.tsx","components/Controls.tsx","components/NightModeToggle.tsx","components/Visualiser.tsx","sorts/bubbleSort.ts","sorts/insertionSort.ts","sorts/selectionSort.ts","sorts/mergeSort.ts","sorts/quickSort.ts","sorts/algorithms.ts","App.tsx","index.tsx"],"names":["SortListbox","list","selectedItem","setSelectedItem","disabled","className","value","onChange","Label","Button","aria-hidden","as","Fragment","leave","leaveFrom","leaveTo","Options","static","map","name","nameIdx","Option","active","selected","ControlButton","React","forwardRef","ref","handleClick","children","onClick","type","displayName","Controls","isRunning","sortNames","arraySize","handleArrayChange","handleSortClick","handleShuffleClick","handleResetClick","selectedSortIdx","setSelectedSortIdx","min","max","show","enter","enterFrom","enterTo","NightModeToggle","handleToggle","isNightMode","isDisabled","checked","Visualiser","sortArray","_","array","style","height","length","Date","toString","bubbleSort","sort","anim","swapped","searchSize","i","isGreater","swap","push","values","insertionSort","j","selectionSort","minIndex","isSmaller","runMergeSort","clonedArray","beginIdx","endIdx","midIdx","Math","floor","merge","k","isLeq","runQuickSort","startIdx","p","partition","pivotIdx","idx1","idx2","animArray","generateArray","size","Array","from","keys","random","algorithms","slice","App","useState","setSortArray","setActive","document","documentElement","classList","contains","isDarkMode","setIsDarkMode","activeRef","useRef","current","useEffect","console","log","startSort","localStorage","setItem","add","remove","animations","sortingAlgorithms","bars","getElementsByClassName","delay","animateSort","idx","prevAnim","prevBars","forEach","bar","currentStep","value1","value2","currBar1","currBar2","currBar","setTimeout","e","Number","target","window","location","href","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9825854b.chunk.js","sourcesContent":["import { Fragment } from 'react';\r\nimport { Listbox, Transition } from '@headlessui/react';\r\nimport { HiCheck, HiSelector } from 'react-icons/hi';\r\n\r\ninterface Props {\r\n  list: string[];\r\n  selectedItem: number;\r\n  setSelectedItem: React.Dispatch<React.SetStateAction<number>>;\r\n  disabled: boolean;\r\n}\r\n\r\nconst SortListbox = ({list, selectedItem, setSelectedItem, disabled}: Props) => {\r\n\r\n  return (\r\n    <div className=\"w-64\">\r\n      <Listbox value={selectedItem} onChange={setSelectedItem} disabled={disabled}>\r\n          <>\r\n            <Listbox.Label className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Algorithm</Listbox.Label>\r\n            <div className=\"relative\">\r\n              <Listbox.Button className=\"relative w-full py-2 pl-3 pr-10 text-left sm:text-sm bg-white dark:bg-trueGray-800 disabled:bg-gray-100 dark:disabled:bg-trueGray-600 hover:bg-blue-50 dark:hover:bg-gray-700 transition-colors duration-150 rounded-md shadow-md focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 cursor-default\">\r\n                <span className=\"block truncate dark:text-gray-400\">{list[selectedItem]}</span>\r\n                <span className=\"absolute inset-y-0 right-0 flex items-center p-2 pointer-events-none\">\r\n                  <HiSelector\r\n                    className=\"w-5 h-5 text-gray-400\"\r\n                    aria-hidden=\"true\"\r\n                  />\r\n                </span>\r\n              </Listbox.Button>\r\n              <Transition\r\n                as={Fragment}\r\n                leave=\"transition ease-in duration-75\"\r\n                leaveFrom=\"transform opacity-100 translate-y-0\"\r\n                leaveTo=\"transform opacity-0 translate-y-1.5 md:-translate-y-1.5\"\r\n              >\r\n                <Listbox.Options static className=\"absolute bottom-full md:bottom-auto z-10 w-full py-1 my-1 overflow-auto text-base bg-white dark:bg-trueGray-800 rounded-md shadow-lg max-h-60 ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm\">\r\n                  {list.map((name, nameIdx) => (\r\n                    <Listbox.Option\r\n                      key={nameIdx}\r\n                      className={({ active }) =>\r\n                        `${active ? 'text-blue-900 dark:text-blue-300 bg-blue-100 dark:bg-gray-700' : 'text-gray-900 dark:text-gray-400'}\r\n                          cursor-default select-none relative py-2 pl-10 pr-4`\r\n                      }\r\n                      value={nameIdx}\r\n                    >\r\n                      {({ selected, active }) => (\r\n                        <>\r\n                          <span\r\n                            className={`${selected ? 'font-medium' : 'font-normal'\r\n                              } block truncate`}\r\n                          >\r\n                            {name}\r\n                          </span>\r\n                          {selected ? (\r\n                            <span\r\n                              className={`${active ? 'text-blue-600' : 'text-blue-600'}\r\n                                absolute inset-y-0 left-0 flex items-center pl-3`}\r\n                            >\r\n                              <HiCheck className=\"w-5 h-5\" aria-hidden=\"true\" />\r\n                            </span>\r\n                          ) : null}\r\n                        </>\r\n                      )}\r\n                    </Listbox.Option>\r\n                  ))}\r\n                </Listbox.Options>\r\n              </Transition>\r\n            </div>\r\n          </>\r\n      </Listbox>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SortListbox;","import React, { PropsWithChildren } from 'react';\r\n\r\ninterface Props {\r\n  handleClick: () => void;\r\n}\r\n\r\nconst ControlButton = React.forwardRef<HTMLButtonElement, PropsWithChildren<Props>>(({handleClick, children}, ref) => (\r\n    <button\r\n      ref={ref}\r\n      onClick={handleClick}\r\n      type='button'\r\n      className='h-full px-4 py-2 text-sm font-medium text-gray-400 bg-gray-50 dark:bg-trueGray-800 hover:bg-gray-100 dark:hover:bg-trueGray-700 active:bg-gray-200 dark:active:bg-trueGray-600 transition-colors duration-150 rounded-md focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500'\r\n    >\r\n      {children}\r\n    </button>\r\n));\r\n\r\nControlButton.displayName = 'ControlButton';\r\n\r\nexport default ControlButton;\r\n\r\n","import SortListbox from './SortListbox';\r\nimport { BiReset, BiRefresh } from 'react-icons/bi';\r\nimport { Transition } from '@headlessui/react';\r\nimport { Fragment } from 'react';\r\nimport ControlButton from './ControlButton';\r\n\r\ninterface Props {\r\n  isRunning: boolean;\r\n  sortNames: string[];\r\n  arraySize: number;\r\n  handleArrayChange: React.ChangeEventHandler<HTMLInputElement>;\r\n  handleSortClick: () => void;\r\n  handleResetClick: () => void;\r\n  handleShuffleClick: () => void;\r\n  selectedSortIdx: number;\r\n  setSelectedSortIdx: React.Dispatch<React.SetStateAction<number>>;\r\n}\r\n\r\nconst Controls = ({\r\n  isRunning,\r\n  sortNames,\r\n  arraySize,\r\n  handleArrayChange,\r\n  handleSortClick,\r\n  handleShuffleClick,\r\n  handleResetClick,\r\n  selectedSortIdx,\r\n  setSelectedSortIdx\r\n}: Props) => (\r\n  <>\r\n    <div className='w-64'>\r\n      <div className='text-sm font-medium text-gray-500 dark:text-gray-400'>\r\n        <span>Array size</span>\r\n        <span className='float-right'>{arraySize}</span>\r\n      </div>\r\n      <input\r\n        type='range'\r\n        min='5'\r\n        max='100'\r\n        disabled={isRunning}\r\n        value={arraySize}\r\n        onChange={handleArrayChange}\r\n        className='w-full rounded-lg focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500'\r\n      />\r\n    </div>\r\n\r\n    <SortListbox\r\n      list={sortNames}\r\n      selectedItem={selectedSortIdx}\r\n      setSelectedItem={setSelectedSortIdx}\r\n      disabled={isRunning}\r\n    />\r\n    <div className='w-64 mt-2 mb-8 grid grid-cols-3 gap-x-4'>\r\n      <ControlButton handleClick={handleShuffleClick}>\r\n        <BiRefresh className=\"w-5 h-5 mx-auto\" aria-hidden=\"true\" />\r\n        Shuffle\r\n      </ControlButton>\r\n\r\n      <button\r\n        onClick={handleSortClick}\r\n        type='button'\r\n        className='z-0 min-w-0 h-3/4 px-4 py-2.5 self-center text-sm font-medium text-blue-900 dark:text-blue-400 bg-blue-100 dark:bg-gray-700 hover:bg-blue-200 dark:hover:bg-gray-600 active:bg-blue-300 dark:active:bg-gray-500 rounded-md shadow-md transition transform motion-reduce:transition-none duration-75 ease-out active:translate-y-0.5 active:shadow-none focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500'\r\n      >\r\n        Sort\r\n    </button>\r\n\r\n      <Transition\r\n        as={Fragment}\r\n        show={isRunning}\r\n        enter='transition ease-out duration-100'\r\n        enterFrom='transform -translate-x-3 opacity-0' enterTo='transform translate-x-0 opacity-100'\r\n        leave='transition ease-in duration-100'\r\n        leaveFrom='opacity-100' leaveTo='opacity-0'\r\n      >\r\n        <ControlButton handleClick={handleResetClick}>\r\n          <BiReset className=\"w-5 h-5 mx-auto\" aria-hidden=\"true\" />\r\n          Reset\r\n        </ControlButton>\r\n      </Transition>\r\n      \r\n    </div>\r\n  </>\r\n);\r\n\r\nexport default Controls;","import { Switch } from '@headlessui/react';\r\n\r\ninterface Props {\r\n  handleToggle: (checked: boolean) => void;\r\n  isNightMode: boolean;\r\n  isDisabled: boolean;\r\n}\r\n\r\nconst NightModeToggle = ({handleToggle, isNightMode, isDisabled}: Props) => {\r\n\r\n  return (\r\n      <Switch\r\n        disabled={isDisabled}\r\n        checked={isNightMode}\r\n        onChange={handleToggle}\r\n        className={`${isNightMode ? 'bg-teal-900' : 'bg-teal-500'}\r\n          inline-flex flex-shrink-0 h-[30.5px] w-[58px] border-2 border-transparent rounded-full cursor-pointer disabled:bg-gray-400 dark:disabled:bg-trueGray-600 disabled:cursor-not-allowed transition-colors ease-in-out duration-200 focus:outline-none focus-visible:ring-2  focus-visible:ring-white focus-visible:ring-opacity-75`}\r\n      >\r\n        <span className=\"sr-only\">Use setting</span>\r\n        <span\r\n          aria-hidden=\"true\"\r\n          className={`${isNightMode ? 'translate-x-7' : 'translate-x-0'}\r\n            pointer-events-none inline-block h-[26px] w-[26px] rounded-full bg-white dark:bg-trueGray-200 shadow-lg transform ring-0 transition ease-in-out duration-200`}\r\n        />\r\n      </Switch>\r\n  );\r\n};\r\n\r\nexport default NightModeToggle;\r\n","interface Props {\r\n  sortArray: number[];\r\n}\r\n\r\nconst Visualiser = ({sortArray}: Props) => (\r\n  <div className='visual-bars col-span-6 lg:col-span-7 h-[24rem] lg:h-[30rem] flex items-end justify-center space-x-0.5 md:space-x-1 mx-4'>\r\n    {sortArray.map((value, _, array) => (\r\n    <div key={value + Date().toString()} className='w-14 bg-teal-500 dark:bg-teal-600 rounded-tl-md  ' style={{ height: `${(value + 1) / array.length * 100}%` }}></div>\r\n  ))}\r\n</div>\r\n);\r\n\r\nexport default Visualiser;","import {SortingAlgorithm, AnimationStep, isGreater, swap } from './algorithms';\r\n\r\nconst sort = (array: number[]) => {\r\n  const anim: AnimationStep[] = [];\r\n\r\n  let swapped = true;\r\n  let searchSize = array.length;\r\n\r\n  while (swapped) {\r\n    swapped = false;\r\n\r\n    // Start at 1 since i-1 is used to compare.\r\n    //array.length - 1 because last position will be naturally sorted.\r\n    for (let i = 1; i < searchSize; i++) {\r\n      if (isGreater(i-1, i, array, anim)) {\r\n        swap(i-1, i, array, anim);\r\n        swapped = true;\r\n      }\r\n    }\r\n    searchSize--;\r\n  }\r\n\r\n  anim.push({type: 'end', values: [-1, -1], array: array});\r\n  return anim;\r\n};\r\n\r\nexport const bubbleSort: SortingAlgorithm = {\r\n  name: 'Bubble Sort',\r\n  sort\r\n};","import {SortingAlgorithm, AnimationStep, isGreater, swap } from './algorithms';\r\n\r\nconst sort = (array: number[]) => {\r\n  const anim: AnimationStep[] = [];\r\n\r\n  let i = 1; // Skip first element\r\n  while (i < array.length) {\r\n    let j = i;\r\n    // Compare previous element with current. If previous is larger, swap.\r\n    while (j > 0 && isGreater(j-1, j, array, anim)) {\r\n      swap(j-1, j, array, anim);\r\n      j--;\r\n    }\r\n    i++;\r\n  }\r\n\r\n  anim.push({type: 'end', values: [-1, -1], array});\r\n  return anim;\r\n};\r\n\r\nexport const insertionSort: SortingAlgorithm = {\r\n  name: 'Insertion Sort',\r\n  sort\r\n};","import {SortingAlgorithm, AnimationStep, isSmaller, swap } from './algorithms';\r\n\r\nconst sort = (array: number[]) => {\r\n  const anim: AnimationStep[] = [];\r\n\r\n  // Can do array.length - 1 because last element will already be sorted.\r\n  for (let i = 0; i < array.length - 1; i++) { \r\n    let minIndex = i;\r\n    for (let j = i + 1; j < array.length; j++) {\r\n      if (isSmaller(j, minIndex, array, anim)) minIndex = j;\r\n    }\r\n    if (minIndex !== i) {\r\n      swap(i, minIndex, array, anim);\r\n    }\r\n  }\r\n\r\n  anim.push({type: 'end', values: [-1, -1], array});\r\n  return anim;\r\n};\r\n\r\nexport const selectionSort: SortingAlgorithm = {\r\n  name: 'Selection Sort',\r\n  sort\r\n};","import { AnimationStep, isLeq } from \"./algorithms\";\r\n\r\nconst sort = (array: number[]) => {\r\n  const anim: AnimationStep[] = [];\r\n  runMergeSort(array, array.slice(), 0, array.length - 1, anim);\r\n  anim.push({type: 'end', values: [-1, -1], array});\r\n  return anim;\r\n};\r\n\r\nconst runMergeSort = (array: number[], clonedArray: number[],\r\n  beginIdx: number, endIdx: number, anim: AnimationStep[]) => {\r\n\r\n  if (beginIdx === endIdx) return;  // Base case - if subarray is length 1, return.\r\n  const midIdx = Math.floor((beginIdx + endIdx) / 2);\r\n  runMergeSort(clonedArray, array, beginIdx, midIdx, anim);\r\n  runMergeSort(clonedArray, array, midIdx + 1, endIdx, anim);\r\n  merge(array, clonedArray, beginIdx, midIdx, endIdx, anim);\r\n  return array;\r\n};\r\n\r\nconst merge = (array: number[], clonedArray: number[],\r\n  beginIdx: number, midIdx: number, endIdx: number, anim: AnimationStep[]) => {\r\n\r\n  let i = beginIdx;\r\n  let k = beginIdx;\r\n  let j = midIdx + 1;\r\n\r\n  // Compare the first element of each subarray, and pop the smallest element.\r\n  // Increment from the array that was saved, and repeat until one array is empty.\r\n  while (i <= midIdx && j <= endIdx) {\r\n      if (isLeq(i, j, clonedArray, anim)) {\r\n      anim.push({type: 'overwrite', values: [k, clonedArray[i]]});\r\n      array[k++] = clonedArray[i++];\r\n    } else {\r\n      anim.push({type: 'overwrite', values: [k, clonedArray[j]]});\r\n      array[k++] = clonedArray[j++];\r\n    }\r\n  }\r\n\r\n  // Go through the arrays and add all the elements left over.\r\n  while (i <= midIdx) {\r\n    anim.push({type: 'overwrite', values: [k, clonedArray[i]]});\r\n    array[k++] = clonedArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    anim.push({type: 'overwrite', values: [k, clonedArray[j]]});\r\n    array[k++] = clonedArray[j++];\r\n  }\r\n};\r\n\r\nexport const mergeSort = {\r\n  name: 'Merge Sort',\r\n  sort\r\n};","import { AnimationStep, isGreater, isSmaller, SortingAlgorithm, swap } from './algorithms';\r\n\r\nconst sort = (array: number[]) => {\r\n  const anim: AnimationStep[] = [];\r\n  runQuickSort(array, 0, array.length - 1, anim);\r\n  anim.push({type: 'end', values: [-1, -1], array: array});\r\n  return anim;\r\n};\r\n\r\nconst runQuickSort = (array: number[], startIdx: number, endIdx: number, anim: AnimationStep[]) => {\r\n  if (startIdx < endIdx) {\r\n    const p = partition(array, startIdx, endIdx, anim);\r\n    runQuickSort(array, startIdx, p, anim);\r\n    runQuickSort(array, p + 1, endIdx, anim);\r\n  }\r\n};\r\n\r\nconst partition = (array: number[], startIdx: number, endIdx: number, anim: AnimationStep[]) => {\r\n  // Set pivot to be the middle of the array\r\n  let pivotIdx = Math.floor((startIdx + endIdx) / 2);\r\n  let i = startIdx - 1;\r\n  let j = endIdx + 1;\r\n\r\n  for (;;) {\r\n    // Inc/dec i and j until they pass the value of pivot\r\n    do {\r\n      i++;\r\n    } while (isSmaller(i, pivotIdx, array, anim));\r\n    do {\r\n      j--;\r\n    } while (isGreater(j, pivotIdx, array, anim));\r\n    if (i >= j) {\r\n      return j;\r\n    }\r\n    swap(i, j, array, anim);\r\n\r\n    // Update value of pivot if moved\r\n    if (i === pivotIdx) {\r\n      pivotIdx = j;\r\n    } else if (j === pivotIdx) {\r\n      pivotIdx = i;\r\n    }\r\n  }\r\n};\r\n\r\nexport const quickSort: SortingAlgorithm = {\r\n  name: 'Quick Sort',\r\n  sort\r\n};","import { bubbleSort } from './bubbleSort';\r\nimport { insertionSort } from './insertionSort';\r\nimport { selectionSort } from './selectionSort';\r\nimport { mergeSort } from './mergeSort';\r\nimport { quickSort } from './quickSort';\r\n\r\nexport interface SortingAlgorithm {\r\n  name: string;\r\n  sort: (array: number[]) => AnimationStep[];\r\n}\r\n\r\nexport type AnimationStep = AnimationChange | AnimationEnd;\r\n\r\ninterface AnimationBase {\r\n  type: string;\r\n  values: [number, number];\r\n}\r\ninterface AnimationChange extends AnimationBase {\r\n  type: 'compare' | 'swap' | 'overwrite';\r\n}\r\n\r\ninterface AnimationEnd extends AnimationBase {\r\n  type: 'end';\r\n  array: number[];\r\n}\r\n\r\nexport const isGreater = (idx1: number, idx2: number, array: number[], animArray: AnimationStep[]) => {\r\n  animArray.push({type: 'compare', values: [idx1, idx2]});\r\n  return array[idx1] > array[idx2];\r\n};\r\n\r\nexport const isSmaller = (idx1: number, idx2: number, array: number[], animArray: AnimationStep[]) => {\r\n  animArray.push({type: 'compare', values: [idx1, idx2]});\r\n  return array[idx1] < array[idx2];\r\n};\r\n\r\nexport const isLeq = (idx1: number, idx2: number, array: number[], animArray: AnimationStep[]) => {\r\n  animArray.push({type: 'compare', values: [idx1, idx2]});\r\n  return array[idx1] <= array[idx2];\r\n};\r\n\r\nexport const swap = (idx1: number, idx2: number, array: number[], animArray: AnimationStep[]) => {\r\n  [array[idx1], array[idx2]] = [array[idx2], array[idx1]];\r\n  animArray.push({type: 'swap', values: [idx1, idx2]});\r\n};\r\n\r\nexport const generateArray = (size: number): number[] => {\r\n  const array = Array.from(Array(size).keys());\r\n\r\n  // Durstenfeld shuffle algorithm: https://stackoverflow.com/a/12646864\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n\r\n  return array;\r\n};\r\n\r\nconst algorithms = [bubbleSort, insertionSort, mergeSort, quickSort, selectionSort];\r\n\r\nexport default algorithms;","import Controls from './components/Controls';\r\nimport NightModeToggle from './components/NightModeToggle';\r\nimport Visualiser from './components/Visualiser';\r\nimport sortingAlgorithms, { AnimationStep, generateArray } from './sorts/algorithms';\r\nimport { FaGithub } from 'react-icons/fa';\r\nimport { HiSun, HiMoon } from 'react-icons/hi';\r\nimport { useEffect, useState, useRef } from 'react';\r\nimport ControlButton from 'components/ControlButton';\r\n\r\nconst App = () => {\r\n\r\n  const [sortArray, setSortArray] = useState(() => generateArray(40));\r\n  const [selectedSortIdx, setSelectedSortIdx] = useState(0);\r\n  const [active, setActive] = useState(false);\r\n  const [isDarkMode, setIsDarkMode] = useState(document.documentElement.classList.contains('dark'));\r\n  const activeRef = useRef(active);\r\n  activeRef.current = active;\r\n\r\n  useEffect(() => {\r\n    console.log('effect');\r\n    \r\n    if (active) {\r\n      startSort();\r\n    } else {\r\n      setSortArray(sortArray.slice());\r\n    }\r\n  }, [active]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('isDarkTheme', isDarkMode.toString());\r\n    if (isDarkMode) {\r\n      document.documentElement.classList.add('dark');\r\n    } else {\r\n      document.documentElement.classList.remove('dark');\r\n    }\r\n  }, [isDarkMode]);\r\n\r\n  const startSort = () => {\r\n    const animations = sortingAlgorithms[selectedSortIdx].sort(sortArray.slice());\r\n    const bars = document.getElementsByClassName('visual-bars')[0].children;\r\n    const delay = (3000 / (sortArray.length)) - 10;\r\n    animateSort(animations, 0, bars, delay);\r\n  };\r\n\r\n  const animateSort = (anim: AnimationStep[], idx: number, bars: HTMLCollection, delay: number) => {\r\n    const prevAnim = anim[idx - 1];\r\n    const prevBars = [];\r\n    if (prevAnim?.type === 'overwrite') {\r\n      prevBars.push(prevAnim.values[0]);\r\n    } else if (prevAnim) {\r\n      prevBars.push(...prevAnim?.values);\r\n    }\r\n    prevBars?.forEach(bar => {\r\n      bars[bar].classList.remove('bg-red-500', 'dark:bg-red-700', 'bg-blue-500', 'dark:bg-blue-700');\r\n      bars[bar].classList.add('bg-teal-500', 'dark:bg-teal-600');\r\n    });\r\n\r\n    const currentStep = anim[idx];\r\n\r\n    const [value1, value2] = currentStep.values;\r\n\r\n    if (activeRef.current) {\r\n\r\n      switch (currentStep.type) {\r\n        case 'compare':\r\n          [bars[value1], bars[value2]].forEach(bar => {\r\n            bar.classList.remove('bg-teal-500', 'dark:bg-teal-600');\r\n            bar.classList.add('bg-red-500', 'dark:bg-red-700');\r\n          });\r\n          break;\r\n\r\n        case 'swap': {\r\n          const currBar1 = bars[value1] as HTMLElement;\r\n          const currBar2 = bars[value2] as HTMLElement;\r\n          [currBar1, currBar2].forEach(bar => {\r\n            bar.classList.remove('bg-teal-500', 'dark:bg-teal-600');\r\n            bar.classList.add('bg-blue-500', 'dark:bg-blue-700');\r\n          });\r\n          [currBar1.style.height, currBar2.style.height] = [currBar2.style.height, currBar1.style.height];\r\n          break;\r\n        }\r\n\r\n        case 'overwrite': {\r\n          const currBar = bars[value1] as HTMLElement;\r\n          currBar.classList.remove('bg-teal-500', 'dark:bg-teal-600');\r\n          currBar.classList.add('bg-blue-500', 'dark:bg-blue-700');\r\n          currBar.style.height = `${(value2 + 1) / sortArray.length * 100}%`;\r\n          break;\r\n        }\r\n\r\n        case 'end':\r\n          setActive(false);\r\n          setSortArray(currentStep.array);\r\n          return;\r\n      }\r\n\r\n      idx++;\r\n      setTimeout(() => animateSort(anim, idx, bars, delay), delay);\r\n\r\n    } else {\r\n      const shuffledBars = Array.from(document.getElementsByClassName('visual-bars')[0].children);\r\n      shuffledBars.forEach(bar => {\r\n        bar.classList.remove('bg-red-500', 'dark:bg-red-700');\r\n        bar.classList.add('bg-teal-500', 'dark:bg-teal-600');\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='h-screen max-w-screen-2xl mx-auto flex flex-col gap-8 md:gap-0'>\r\n      <h1 className='mt-4 font-sans font-black text-center text-4xl md:text-6xl dark:text-trueGray-200 transition-colors duration-150'>Visual Sorts</h1>\r\n      <div className='flex-grow gap-y-5 md:grid md:grid-cols-10 items-center'>\r\n        <Visualiser sortArray={sortArray} />\r\n        <div className='my-8 md:m-0 md:col-span-4 lg:col-span-3 flex flex-col items-center gap-y-5 mx-4'>\r\n          <Controls\r\n            isRunning={active}\r\n            sortNames={sortingAlgorithms.map(sort => sort.name)}\r\n            arraySize={sortArray.length}\r\n            handleArrayChange={(e) => setSortArray(generateArray(Number(e.target.value)))}\r\n            handleSortClick={() => setActive(true)}\r\n            handleResetClick={() => setActive(false)}\r\n            handleShuffleClick={() => {\r\n              setActive(false);\r\n              setSortArray(generateArray(sortArray.length));\r\n            }}\r\n            selectedSortIdx={selectedSortIdx}\r\n            setSelectedSortIdx={(e) => setSelectedSortIdx(e)}\r\n          />\r\n        </div>\r\n      </div>\r\n        <div className='p-4 flex items-center justify-evenly text-gray-500 dark:text-gray-400'>\r\n          <ControlButton handleClick={() => window.location.href = 'https://github.com/Talha-Ak/visual-sorts'}>\r\n            View on\r\n            <FaGithub className='ml-1.5 mb-1 inline'/>\r\n          </ControlButton>\r\n          <div className='flex items-center justify-center space-x-1.5'>\r\n            <HiSun className='inline w-5 h-5' />\r\n            <NightModeToggle isNightMode={isDarkMode} handleToggle={setIsDarkMode} isDisabled={active}/>\r\n            <HiMoon className='inline w-5 h-5' />\r\n          </div>\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}